"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: BSD-3-Clause
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ts_types_1 = require("@salesforce/ts-types");
const fs_1 = require("fs");
const os_1 = require("os");
const path_1 = require("path");
const global_1 = require("../global");
const logger_1 = require("../logger");
const messages_1 = require("../messages");
const sfdxError_1 = require("../sfdxError");
const fs_2 = require("../util/fs");
const internal_1 = require("../util/internal");
const configStore_1 = require("./configStore");
messages_1.Messages.importMessagesDirectory(path_1.join(__dirname));
/**
 * Represents a json config file used to manage settings and state. Global config
 * files are stored in the home directory hidden state folder (.sfdx) and local config
 * files are stored in the project path, either in the hidden state folder or wherever
 * specified.
 *
 * ```
 * class MyConfig extends ConfigFile {
 *   public static getFileName(): string {
 *     return 'myConfigFilename.json';
 *   }
 * }
 * const myConfig = await MyConfig.create({
 *   isGlobal: true
 * });
 * myConfig.set('mykey', 'myvalue');
 * await myConfig.write();
 * ```
 */
class ConfigFile extends configStore_1.BaseConfigStore {
    /**
     * Constructor
     * **Do not directly construct instances of this class -- use {@link ConfigFile.create} instead.**
     * @param options The options for the class instance
     * @ignore
     */
    constructor(options) {
        super(options);
        // whether file contents have been read
        this.hasRead = false;
    }
    /**
     * Returns the config's filename.
     */
    static getFileName() {
        // Can not have abstract static methods, so throw a runtime error.
        throw new sfdxError_1.SfdxError('Unknown filename for config file.');
    }
    /**
     * Returns the default options for the config file.
     * @param isGlobal If the file should be stored globally or locally.
     * @param filename The name of the config file.
     */
    static getDefaultOptions(isGlobal = false, filename) {
        return {
            isGlobal,
            isState: true,
            filename: filename || this.getFileName()
        };
    }
    /**
     * Helper used to determined what the local and global folder point to. Returns the file path of the root folder.
     *
     * @param isGlobal True if the config should be global. False for local.
     */
    static async resolveRootFolder(isGlobal) {
        if (!ts_types_1.isBoolean(isGlobal)) {
            throw new sfdxError_1.SfdxError('isGlobal must be a boolean', 'InvalidTypeForIsGlobal');
        }
        return isGlobal ? os_1.homedir() : await internal_1.resolveProjectPath();
    }
    /**
     * Determines if the config file is read/write accessible. Returns `true` if the user has capabilities specified
     * by perm.
     * @param {number} perm The permission.
     *
     * **See** {@link https://nodejs.org/dist/latest/docs/api/fs.html#fs_fs_access_path_mode_callback}
     */
    async access(perm) {
        try {
            await fs_2.fs.access(this.getPath(), perm);
            return true;
        }
        catch (err) {
            return false;
        }
    }
    /**
     * Read the config file and set the config contents. Returns the config contents of the config file. As an
     * optimization, files are only read once per process and updated in memory and via `write()`. To force
     * a read from the filesystem pass `force=true`.
     * **Throws** *{@link SfdxError}{ name: 'UnexpectedJsonFileFormat' }* There was a problem reading or parsing the file.
     * @param [throwOnNotFound = false] Optionally indicate if a throw should occur on file read.
     * @param [force = true] Optionally force the file to be read from disk even when already read within the process.
     */
    async read(throwOnNotFound = false, force = true) {
        try {
            // Only need to read config files once.  They are kept up to date
            // internally and updated persistently via write().
            if (!this.hasRead || force) {
                this.logger.info(`Reading config file: ${this.getPath()}`);
                const obj = await fs_2.fs.readJsonMap(this.getPath());
                this.setContentsFromObject(obj);
            }
            return this.getContents();
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                if (!throwOnNotFound) {
                    this.setContents();
                    return this.getContents();
                }
            }
            throw err;
        }
        finally {
            // Necessarily set this even when an error happens to avoid infinite re-reading.
            // To attempt another read, pass `force=true`.
            this.hasRead = true;
        }
    }
    /**
     * Write the config file with new contents. If no new contents are provided it will write the existing config
     * contents that were set from {@link ConfigFile.read}, or an empty file if {@link ConfigFile.read} was not called.
     *
     * @param newContents The new contents of the file.
     */
    async write(newContents) {
        if (newContents != null) {
            this.setContents(newContents);
        }
        await fs_2.fs.mkdirp(path_1.dirname(this.getPath()));
        this.logger.info(`Writing to config file: ${this.getPath()}`);
        await fs_2.fs.writeJson(this.getPath(), this.toObject());
        return this.getContents();
    }
    /**
     * Check to see if the config file exists. Returns `true` if the config file exists and has access, false otherwise.
     */
    async exists() {
        return await this.access(fs_1.constants.R_OK);
    }
    /**
     * Get the stats of the file. Returns the stats of the file.
     *
     * {@link fs.stat}
     */
    async stat() {
        return fs_2.fs.stat(this.getPath());
    }
    /**
     * Delete the config file if it exists. Returns `true` if the file was deleted, `false` otherwise.
     *
     * {@link fs.unlink}
     */
    async unlink() {
        const exists = await this.exists();
        if (exists) {
            return await fs_2.fs.unlink(this.getPath());
        }
        throw new sfdxError_1.SfdxError(`Target file doesn't exist. path: ${this.getPath()}`, 'TargetFileNotFound');
    }
    /**
     * Returns the path to the config file.
     */
    getPath() {
        return this.path;
    }
    /**
     * Returns `true` if this config is using the global path, `false` otherwise.
     */
    isGlobal() {
        return !!this.options.isGlobal;
    }
    /**
     * Used to initialize asynchronous components.
     *
     * **Throws** *`Error`{ code: 'ENOENT' }* If the {@link ConfigFile.getFilename} file is not found when
     * options.throwOnNotFound is true.
     */
    async init() {
        this.logger = await logger_1.Logger.child(this.constructor.name);
        const statics = this.constructor;
        let defaultOptions = {};
        try {
            defaultOptions = statics.getDefaultOptions();
        }
        catch (e) {
            /* Some implementations don't let you call default options */
        }
        // Merge default and passed in options
        this.options = Object.assign(defaultOptions, this.options);
        if (!this.options.filename) {
            throw new sfdxError_1.SfdxError('The ConfigOptions filename parameter is invalid.', 'InvalidParameter');
        }
        const _isGlobal = ts_types_1.isBoolean(this.options.isGlobal) && this.options.isGlobal;
        const _isState = ts_types_1.isBoolean(this.options.isState) && this.options.isState;
        // Don't let users store config files in homedir without being in the
        // state folder.
        let configRootFolder = this.options.rootFolder
            ? this.options.rootFolder
            : await ConfigFile.resolveRootFolder(!!this.options.isGlobal);
        if (_isGlobal || _isState) {
            configRootFolder = path_1.join(configRootFolder, global_1.Global.STATE_FOLDER);
        }
        this.messages = messages_1.Messages.loadMessages('@salesforce/core', 'config');
        this.path = path_1.join(configRootFolder, this.options.filePath ? this.options.filePath : '', this.options.filename);
        await this.read(this.options.throwOnNotFound);
    }
}
exports.ConfigFile = ConfigFile;
//# sourceMappingURL=configFile.js.map