// index.js for sfbulk2 npm module
// author: mohan chinnappan


const fetch = require("node-fetch");
async function createJob(instanceUrl, apiVersion, accessToken, operation, obj, contentType, lineEnding) {
    const headers = {
      'Authorization': 'Bearer ' + accessToken,
      'Content-Type': 'application/json;charset=UTF-8',
      'Accept': 'application/json'
    }

    const body = {
      "object" : obj,
      "contentType" : contentType,
      "operation" : operation,
      "lineEnding": lineEnding 
    }

    const  url = `${instanceUrl}/services/data/${apiVersion}/jobs/ingest/`;
    const params = {
        method: "POST",
        mode: "cors",
        headers: headers,
        body: JSON.stringify(body)
    };


    try {
        const response = await fetch(url, params);
        return await response.json();  
    } catch (err) {
        console.log(`ERROR in creating bulkapi2 job : ${err}`);
   }
}

// get job status
async function getJobStatus(instanceUrl, apiVersion, accessToken, opType, jobId) {
    const headers = {
      'Authorization': 'Bearer ' + accessToken,
      'Content-Type': 'application/json;charset=UTF-8',
      'Accept': 'application/json'
    }

    const  url = `${instanceUrl}/services/data/${apiVersion}/jobs/${opType}/${jobId}`;
    const params = {
        method: "GET",
        mode: "cors",
        headers: headers
    };
    try {
        const response = await fetch(url, params);
        return await response.json();  
    } catch (err) {
        console.log(`ERROR in get bulkapi2 job status : ${err}`);
   }

}

// upload data
async function putData(instanceUrl,accessToken, contentUrl, data) {
   const url  = `${instanceUrl}/${contentUrl}`;
   const headers = {
    'Authorization': 'Bearer ' + accessToken,
    'Content-Type': 'text/csv',
     'Accept': 'application/json'
 
    }

    const params = {
        method: "PUT",
        mode: "cors",
        headers: headers,
        body: data
    };

    try {
        const response = await fetch(url, params);
        console.log(`result: status: ${response.status}, statusText: ${response.statusText}`);
        // console.log(response);
        return response;
    } catch (err) {
        console.log(`ERROR in putData bulkapi2  status : ${err}`);
   }

}

// patch the job status
async function  patchState(instanceUrl, apiVersion, accessToken, jobId, state) {
    const url = `${instanceUrl}/services/data/${apiVersion}/jobs/ingest/${jobId}`;
    const headers = {
      'Authorization': 'Bearer ' + accessToken,
      'Content-Type': 'application/json;charset=UTF-8',
      'Accept': 'application/json'
    }
    const patchBody = {"state" : state }
    const params = {
        method: "PATCH",
        mode: "cors",
        headers: headers,
        body: JSON.stringify(patchBody)
    };
    try {
        const response = await fetch(url, params);
        return await response.json();  
    } catch (err) {
        console.log(`ERROR in patchState bulkapi2  : ${err}`);
   }

}

// get job failure status

async function getJobFailureStatus(instanceUrl, apiVersion, accessToken, jobId) {
    const url  = `${instanceUrl}/services/data/${apiVersion}/jobs/ingest/${jobId}/failedResults/`;
    headers = {
      'Authorization': 'Bearer ' + accessToken
    }
    const params = {
        method: "GET",
        mode: "cors",
        headers: headers
    };
     try {
        const response = await fetch(url, params);
        return await response.text(); 
    } catch (err) {
        console.log(`ERROR in getJobFailuerStatus  : ${err}`);
   }
}


// get unprocessed records 

async function getUnprocessedRecords(instanceUrl, apiVersion, accessToken, jobId) {
    const url  = `${instanceUrl}/services/data/${apiVersion}/jobs/ingest/${jobId}/unprocessedrecords/`;
    headers = {
      'Authorization': 'Bearer ' + accessToken
    }
    const params = {
        method: "GET",
        mode: "cors",
        headers: headers
    };
 
     try {
        const response = await fetch(url, params);
        return await response.text(); 
    } catch (err) {
        console.log(`ERROR in getUnprocessedRecords  : ${err}`);
   }
}






// get sObjects 
async function getSObjectDescribe(instanceUrl, apiVersion, accessToken, obj) {

    const headers = {
      'Authorization': 'Bearer ' + accessToken,
      'Content-Type': 'application/json;charset=UTF-8',
      'Accept': 'application/json'
    }

    const  url = `${instanceUrl}/services/data/${apiVersion}/sobjects/${obj}/describe`;
    const params = {
        method: "GET",
        mode: "cors",
        headers: headers
    };
    try {
        const response = await fetch(url, params);
        return await response.json();  
    } catch (err) {
        console.log(`ERROR in getSObjectDescribe : ${err}`);
   }


}

// exports
module.exports  = {
 createJob: createJob,
 getJobStatus: getJobStatus,
 putData: putData,
 patchState: patchState,
 getJobFailureStatus: getJobFailureStatus,
 getJobFailureStatus: getJobFailureStatus,
 getUnprocessedRecords: getUnprocessedRecords,
 getSObjectDescribe: getSObjectDescribe
}
/*
try {
getSObjectDescribe(cji.instanceUrl, cji.apiVersion, cji.accessToken, 'Case')
  .then (data => console.log(data) );
}
catch (err){
    console.log(`ERROR in getting SObject Describe  : ${err}`);
 
}
*/

